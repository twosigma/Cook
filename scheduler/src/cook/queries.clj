;;
;; Copyright (c) Two Sigma Open Source, LLC
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;  http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
(ns cook.queries
  (:require [datomic.api :as d :refer [q]]
            [metrics.timers :as timers]))

;;
;; This file is intended to break circular dependencies by letting us place datomic queries into a
;; place that no other cook code depends on. DO NOT REQUIRE ANY COOK NAMESPACE.
;;

(defn get-all-resource-types
  "Return a list of resources types that are used for both binpacking and filtering the queue. Example, :cpus :mem :gpus ...
   Note that this function name is misleading, and does not actually return ALL resource types."
  [db]
  (->> (q '[:find ?ident
            :where
            [?e :resource.type/mesos-name ?ident]]
          db)
       (map first)))

(defn get-pending-job-ents*
  "Returns a seq of datomic entities corresponding to jobs

   Parameters:
   `unfiltered-db` a database generated by calling datomic.api/db directly
   `committed?` boolean whether the jobs are committed or not"
  [unfiltered-db committed?]
  ;; This function explicitly uses the unfiltered (not metatransaction filtered)
  ;; db to improve the performance of this query. We are working to remove
  ;; metatransaction throughout the code
  (->> (q '[:find [?j ...]
            :in $ ?state ?committed?
            :where
            [?j :job/state ?state]
            [?j :job/commit-latch ?cl]
            [?cl :commit-latch/committed? ?committed?]]
          unfiltered-db :job.state/waiting committed?)
       (map (partial d/entity unfiltered-db))))

(timers/deftimer [cook-mesos scheduler get-pending-jobs-duration])

(defn get-pending-job-ents
  "Returns a seq of datomic entities corresponding to jobs

   Parameters:
   `unfiltered-db` a database generated by calling datomic.api/db directly"
  ([unfiltered-db]
   (timers/time!
     get-pending-jobs-duration
     (get-pending-job-ents* unfiltered-db true))))