== Overview

Cook has a lot of options in its configuration file.
This document will attempt to cover all the supported configuration options for the Cook scheduler.
Cook is designed to support multiple config file formats (json, yaml, edn), but today, it only supports edn.
The edn format (pronounced eden, like the garden) is described at https://github.com/edn-format/edn.
The most important thing to know about edn is that there's nothing separating keys and values (that is, no `:` like in Python or `->` like in Scala) in maps, and commas are whitespace.

In this guide, configuration will be written as fragments.

=== Sample Config Files

Before looking over this guide, you should check out the sample config files, `dev-config.edn` and `example-prod-config.edn`.
The `dev` config starts up an embedded Zookeeper and Datomic so that you don't have to.
It also enables all of the introspection features, like JMX metrics and nREPL, without sending any emails or metrics to alerting systems.
To use the `dev` config yourself, just make sure that the Mesos cluster's `:master` is set correctly, and the username exists on your slaves.

The `prod` config instead uses external Zookeeper and Datomic to ensure high availability and persistence.
It registers with Mesos so that it can fail over successfully without losing any tasks.
It also is chattier, sending emails and metrics to other systems to improve visibility.

At this point, you're probably wondering what all these options actually do, and how to configure them.
The next several sections will document what every option does.

=== Basic Configuration Options

`:port`::
  This is the port that the REST API will bind to.

`:database`::
  This configures which database Cook will connect to.
  Currently, Cook only supports Datomic.
  Thus, `:database` must be set to a map with a single key: `{:datomic-uri "$DB_URI"}`.
+
Datomic's pretty awesome because it has an in-process embedded in-memory version, which is specified by using an in-memory backend.
To use the in-memory DB, use the URI `datomic:mem://cook-jobs`.
An example URI for connecting to a Datomic free transactor on the host `$HOST` would be  `datomic:free://$HOST:4334/cook-jobs`.
See http://docs.datomic.com/getting-started.html for more information on setting up Datomic.

.Datomic Configuration in Production
[TIP]
====
Cook uses special http://docs.datomic.com/database-functions.html[transaction functions] to maintain distributed consistency.
When running a standalone transactor (as in most QA and Production environments), you'll need to include a copy of the Cook jar on the Datomic transactor's classpath.
This will ensure that all of the transaction functions are available on the transactor.
====

`:zookeeper`::
  This configures which Zookeeper Cook will connect to.
  You can either have Cook use an embedded Zookeeper (great for development and trying out Cook), or use an external Zookeeper quorum (required for production).
  To use a production Zookeeper quorum located at `$QUORUM` (e.g. `zk1.example.com,zk2.example.com,zk3.example.com/cook`), you should use a map: `{:connection "zk1.example.com:2181,zk2.example.com:2181,zk3.example.com:2181/cook"}`.
+
To use the embedded Zookeeper for development, use the map `{:local? true}`.
By default, the embedded Zookeeper will bind to port 3291.
If need it to bind to another port, you can specify that with the `:local-port` key: e.g. `{:local? true, :local-port 9001}`.

`:mesos`::
  This key configures how Cook will interact with the Mesos cluster.
  See <<mesos_config>> for details.

`:authorization`::
  This key configures how Cook will validate users for multitenant scheduling.
  Cook currently supports a single-user development mode, HTTP Basic authentication, and Kerberos authentication.
  See <<auth_config>> for details.

`:user-privileges`::

  This key defines what privileges specified users have on the
  system. Its value is a map. Keys of this map are the names of
  privileges, and values are sets of users who have that privilege.
  The only currently supported privilege is `:admin`. Admins can
  modify any jobs on the system, while non-admins can only modify
  their own jobs.
  For example, to make Alice and Bob admins, add a line like:
  `:user-privileges {:admin #{"alice" "bob"}}`

[[mesos_config]]
==== Mesos Configuration

Mesos configuration is specified as a map, because there are several properties that can be configured about the way Cook connects to Mesos.
We'll look at the configurable options in turn:

`:master`::
  This option sets the Mesos master connection string.
  For example, if you are running Mesos with a Zookeeper node on the local machine (a common development setup), you'd use the connection string `zk://localhost:2181/mesos`.

`:master-hosts`::
  This configures a list of hosts where Mesos master are running on. For example `["zk1.example.com", "zk2.example.com", "zk3.example.com"]`. +
  When not set explicitly, Mesos master hosts are derived from Mesos master connection string. For example, if the connection string is `"zk://zk1.example.com:2181,zk2.example.com:2181,zk3.example.com:2181/mesos"`, master hosts will be set to `["zk1.example.com", "zk2.example.com", "zk3.example.com"]`.

`:failover-timeout-ms`::
  This options sets the number of milliseconds that Mesos will wait for the Cook framework to reconnect.
  In development, you should set this to `nil`, which means that Mesos will treat any disconnection of Cook as the framework ending; this will kill all of Cook's tasks when it disconnects.
  In production, it's recommended to set this to 1209600000, which is 2 weeks in milliseconds.
  This means that when the Cook scheduler goes down, you have 2 weeks to reconnect a new instance, during which no tasks will be forcibly killed.
  Typically, however, you'll only wait 10-30 seconds for reconnection, since Cook is usually run with hot standbys.

`:leader-path`::
  This configures the path that Cook will use for its high-availibility configuration.
  The Zookeeper quorum is the one configured in the top-level `:zookeeper` option.
  As long as the Zookeeper quorum and `:leader-path` are the same, then multiple instances of Cook will be able to synchronize, perform leader election, and perform framework recovery and failover automatically.
  For a production deployment, you can just run two or three copies of Cook on different hosts, and even if a host fails, Cook won't be affected.

`:principal`::
  This sets the principal that Cook will connect to Mesos with.
  You can omit this property unless you've enabled security features with Mesos. The value here should match with authorized `principals` in `register_frameworks` Action in Mesos Authorization file. See http://mesos.apache.org/documentation/latest/authorization/ for details.

`:role`::
  This sets the role that Cook will connect to Mesos with. Default: `*`
  You can omit this property unless you've enabled security features in Mesos. The value should be in authorized list for the current `:principal` in `register_frameworks` Action in Mesos Authorization file. See http://mesos.apache.org/documentation/latest/authorization/ for details.

[[auth_config]]
==== Authorization Configuration

One of Cook's most valuable features is its fair-sharing of a cluster.
But how does Cook know who submitted which jobs?
Every request to Cook's REST API is authenticated, so that we know which user is making the request.
Keep in mind that the username used for authentication is also the username that Cook will run the job as, so make sure that user exists on your Mesos slaves.
We'll look at the three authentication mechanisms supported:

`:one-user`::
  When doing development with Cook, it's nice to be able to use it without any authentication.
  You can have Cook treat every request as coming from a specific user `$USER` by configuring the `:authorization` like so:
+
[source,edn]
----
{
 ; ... snip ...
 :authorization {:one-user "$USER"}
 ; ... snip ...
}
----

`:http-basic`::
  Most organizations will want to use HTTP Basic authentication.
  Cook ignores the password field, so this is suitable if you trust all users of Cook on your network.
  This also makes it super easy to get started:
  to use HTTP Basic, simply use `{:http-basic true}` as your `:authorization`.

`:kerberos`::
  If you have Kerberos at your organization, then you can use it to authenticate users with Cook.
  To use Kerberos, simply use `{:kerberos true}` as your `:authorization`.

=== Scheduler Knobs

The Cook scheduler comes with a few knobs to tune its behavior under the `:scheduler` key.

`:offer-incubate-ms`::
  This option configures how long Cook will hold onto offers, in order to try to coalesce offers and find better placements for tasks.
  We recommend setting this to 15000.
  If you set this to zero, Cook might not be able to find sufficiently large offers for tasks if you're running other frameworks on your Mesos cluster at the same time.

`:task-constraints`::
  This option is a map that allows you to configure limits for tasks, to ensure that impossible-to-schedule tasks and tasks that run forever won't bog down your cluster.
  It currently supports 4 parameters to defend the Cook scheduler, which are described in <<task_constraints>>.

[[task_constraints]]
==== Task Constraints

`:timeout-hours`::
  This specifies the max time that a task is allowed to run for.
  Any tasks running for longer than this will be automatically killed.

`:timeout-interval-minutes`::
  This specifies how often to check for timed-out tasks.
  Since checking for timed-out tasks is linear in the number of running tasks, this can take a while.
  On the other hand, if your timeout is one hour, but you only check every 30 minutes, some tasks could end up running for almost one and a half hours!

`:memory-gb`::
  This specifies the max amount of memory that a task can request.
  You should make sure this is small enough that users can't accidentally submit tasks that are too big for your slaves.

`:cpus`::
  This is just like `:memory-gb`, but for CPUs.
  You should make sure this is small enough that users can't accidentally submit tasks that are too big for your slaves.

=== Debugging Facilities

Cook is designed to be easy to debug and monitor.
We'll look at the various monitoring and debugging subconfigs:

`:metrics`::
  This map configures where and how to report Cook's internal scheduling and performance metrics.
  See <<metrics>> for details.

`:nrepl`::
  Cook can start an embedded https://github.com/clojure/tools.nrepl[nREPL] server.
  nREPL allows you to log into the Cook server and inspect and modify the code while it's running.
  This should not be enabled on untrusted networks, as anyone who connects via nREPL can bypass all of Cook's security mechanisms.
  This is really useful for development, though!
  See <<nrepl>> for details.

`:log`::
  This section configures Cook's logging.
  See <<logging>> for details.

`:unhandled-exceptions`::
  This map configures what Cook's behavior should be when it encounters an exception that doesn't already have code implemented to handle it.
  See <<unhandled_exceptions>> for how to configure.

[[metrics]]
==== Metrics

Cook can transmit its internal metrics over a variety of transports, such as JMX, Graphite, and Riemann.
Internally, Cook uses Dropwizard Metrics 3, so we can easily add support for any Metrics 3 compatible reporter.

JMX Metrics::
  To enable JMX metrics, set the `:metrics` key to `{:jmx true}`.

Riemann Metrics::
  To enable Riemann metrics, you'll need to populate the `:riemann` map.
  Riemann allows you to customize the "local host" reported to the Riemann server, the prefix attached to all events, and the tags added to all events.
  Cook automatically sends metrics every 30 seconds with a TTL of 60 seconds, to simplify failure detection with Riemann.
  Here's a example of enabling Riemann metrics:
+
[source,edn]
----
:metrics {:riemann {:host "my-riemann-server.example.com"
                    :port 5555 ; optional, default 5555
                    :tags ["cook", "infrastructure"] ; defaults to no tags
                    :local-host "alt-host-name.example.com" ; optional, defaults to local host's name
                    :prefix "cook " ; optional, default nothing
                   }}
----

Graphite Metrics::
  To enable Graphite metrics, you'll need to populate the `:graphite` map.
  We support setting a prefix on all metrics, choosing which graphite server to connect to, and whether to use the plain-text or pickled transport format.
  Here's an example of enabling Graphite metrics:
+
[source,edn]
----
:metrics {:graphite {:host "my-graphite-server.example.com"
                     :port 2003
                     :prefix "cook"
                     :pickled? false ; defaults to true
                    }}
----

Also, keep in mind that you can enable multiple metrics reporters simultaneously, if that's useful in your environment.
For example, you could use JMX and graphite together:

[source,edn]
----
:metrics {:graphite {:host "my-graphite-server.example.com"
                     :port 2003
                     :prefix "cook"}
          :jmx true}
----


[[nrepl]]
==== nREPL

The `:nrepl` key takes a map that supports two options:

`:enabled?`::
  Set this to `true` if you'd like to start the embedded nREPL server.

`:port`::
  Set this the to the port number you'd like the nREPL server to bind to.
  You must choose a port to enable nREPL.

[[logging]]
==== Logging

Cook's logging is configured under `:log`.
Cook automatically rotates its logs daily, and includes information about package, namespace, thread, and the time for every log message.

`:file`::
  You must choose a file location for Cook to write its log.
  It's strongly recommended to specify a log file under a folder, e.g. `log/cook.log`, since Cook will rotate the log files by appending `.YYYY-MM-dd` to the specified path.
  The path can be relative (from the directory you launch Cook) or absolute.

`:levels`::
  You can also specify log levels to increase or decrease verbosity of various components of Cook and libraries it uses.
  We'll look at an example, which sets the default logging level to `:info`, but sets a few Datomic namespaces to use the `:warn` level.
  This also happens to be the recommended logging configuration:
+
[source,edn]
----
:levels {"datomic.db" :warn
         "datomic.peer" :warn
         "datomic.kv-cluster" :warn
         :default :info}}
----
+
As you can see, specific packages and namespaces are specified by strings as the map's keys; their values specify their log level override.

[[unhandled_exceptions]]
==== Unhandled Exceptions

Everyone makes mistakes.
We'd like to know when errors happen that we didn't anticipate.
That's what the `:unhandled-exceptions` key is for.
Let's look at what options it takes:

`:log-level`::
  This lets you choose the level to log unhanded error at.
  Usually `:error` is the right choice, although you may want to log these at the `:fatal` level.

`:email`::
  You can also choose to receive emails when an unhandled exception occurs.
  This key takes a map that it uses as a template for the email.
  Cook uses https://github.com/drewr/postal[postal] to send email.
  For advanced configuration, check out the postal's documentation.
  Cook will append details to whatever subject line you provide, and it will fill in the body with the stacktrace, thread, and other useful info.
  Here's a simple example of setting up email:
+
[source,edn]
----
:email {:to ["admin@example.com"]
        :from "cook@example.com"
        :subject "Unhandled exception in cook"}
----

### Production JVM Options

It can be intimidating to choose JVM options to enable Cook to run with high performance--what GC to use, how much heap, which Datomic options?
Here's a table with some options that should work for a cluster with thousands of machines:

.Cook JVM Options Recommendations for Large Clusters
[options="header"]
|====
|Options | Reasoning
|`-XX:UseG1GC` | This enables the low-pause collector, which gives better API latency characteristics
|`-XX:MaxGCPauseMillis=50` | This means that the JVM will target to never stop the world for move than 50ms
|`-Ddatomic.readConcurrency=10` | Increase datomic read rate to improve table scans
|`-Ddatomic.writeConcurrency=10` | Balance the writes with the read rate for faster job updates
|`-Ddatomic.memIndexThreshold=256m` | This allows Datomic to index much less often
|`-Ddatomic.memIndexMax=512m` | This allows Datomic to accept writes during slow indexing jobs for longer
|`-Ddatomic.txTimeoutMsec=60000` | Sometimes, we generate big and bad transactions--this helps us to not die
|`-Ddatomic.peerConnectionTTLMsec=35000` | This helps to deal with slow peers
|`-Ddatomic.objectCacheMax=2g` | This accelerates queries by caching a lot of data in memory
|`-Xmx12g` | Set the heap to use 12GB
|`-Xms12g` | Don't bother scaling the heap up--just force it to start at full size
|====

### License

© Two Sigma Open Source, LLC
